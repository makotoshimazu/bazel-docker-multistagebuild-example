load(
    "@io_bazel_rules_docker//container:container.bzl",
    "container_image",
)
load(
    "@io_bazel_rules_docker//docker/util:run.bzl",
    "container_run_and_extract",
)

# The files used by the base image.
filegroup(
    name = "scripts",
    srcs = [
        "hello.sh",
        "scripts/sample.sh",
    ],
    visibility = ["//visibility:private"],
)

# Create a container image: progatepath/simple:build_image.
container_image(
    name = "build_image",
    base = "@alpine_linux_amd64//image",
    data_path = ".",
    directory = "/workspace",
    entrypoint = ["/workspace/scripts/sample.sh"],
    files = [
        ":scripts",
    ],
    repository = "progatepath",
)

# Run progatepath/simple:build_image and extract a file `/workspace/hello.sh`
# as the build output.
# You can try `bazel build //simple:build` and see the path to the extracted
# file by the following command:
#
# $ bazel cquery //simple:build/workspace/hello.sh --output starlark \
#     --starlark:expr="target.files.to_list()[0].path" 2>/dev/null
#
container_run_and_extract(
    name = "build",
    commands = ["echo do nothing."],
    extract_file = "/workspace/hello.sh",
    # Use the layer generated by `container_image` rule.
    image = ":build_image.tar",
)

# You can try the image by these two steps:
#
# Step 1: Build a image by bazel
#   $ bazel run //simple:image
# Step 2: Run the image by docker
#   $ docker run progatepath/simple:image
container_image(
    name = "image",
    base = "@alpine_linux_amd64//image",
    # It puts files relative to the workspace.
    # hello.sh goes to `/workspace/simple/build/workspace/hello.sh`.
    data_path = "/",
    directory = "/workspace",
    entrypoint = ["/workspace/hello.sh"],
    files = [
        ":build/workspace/hello.sh",
        "//somefiles:textfiles",
    ],
    repository = "progatepath",
)
